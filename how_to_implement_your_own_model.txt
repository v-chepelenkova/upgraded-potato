****How to create your own event?****
{Next steps in events/ folder}
1. There is an abstract Event structure in CORE. First of all, inherit your own
AnyEvent structure (StorageEvent in the example) from Event.
[add my_event.h file; storage_event.h in the example]

2. You're trying to add some new MyEvent structure. Add it in the std::variant
in AnyEvent structure.
[see my_event.h file; storage_event.h in the example]

3. Add your MyEvent structure declaration.
[see my_event.h file; storage_event.h in the example]

4. There is an std::visit in AnyEvent's Handle() function. Add there your
lambda function with your event.
[see my_event.cpp file; storage_event.cpp in the example]

{Next step in inhabitants/src and inhabitants/include folders}
5. If MyEvent is generated by some Inhabitant, make sure that you're returning
that event where needed.
[see my_inhabitant.h/.cpp; thief.h/.cpp in the example]

{Next step in model folder}
6. Don't forget to notify observers when event is happening. Do it inside Model's
member functions, or do it manually, when event is generated by some inhabitant.
[see my_model.cpp; storage_model.cpp in the example]


****How to create your own inhabitant?****
[Next step in inhabitants/src and inhabitants/include folders]
1. Your inhabitant will have some name. Add it into InhabitantType enum.
[add inhabitant_types.h in inhabitants/include/; see ] 
[!!!IMPORTANT!!! Name the file as "inhabitant_types.h"]

2. Create .h for your inhabitant class in include/ folder.
inherit it from Inhabitant abstract class (which is in CORE).
[add my_inhabitant.h; product.h and thief.h in the example]

3. Your inhabitant's private fields are it's Attributes (they are in CORE).
Specialize the Attributes template using inhabitant's name from enum (step 1)
and declare them.
[see my_inhabitant.h; product.h and thief.h in the example]

4. Implement inhabitant's behavior in .cpp file and put it in src/ folder.
[see my_inhabitant.h; product.h and thief.h in the example]