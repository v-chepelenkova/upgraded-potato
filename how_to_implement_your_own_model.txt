****How to create your own inhabitant****
[Next step takes place in inhabitants/src and inhabitants/include folders (for .cpp and .h files accordingly)]
1. Your inhabitant will have some name. Add it into InhabitantType enum.
[add inhabitant_types.h in inhabitants/include/; see inhabitant.h in the example] 
[!!!IMPORTANT!!! Name the file as "inhabitant_types.h"]

2. Create .h for your inhabitant class in include/ folder.
inherit it from Inhabitant abstract class (which is located in CORE).
When inheriting don't forget to implement all the virtual methods. //Should we name them one by one?//
[see my_inhabitant.h; product.h and thief.h in the example]

3. Your inhabitant's private fields are it's Attributes (they are in CORE).
Specialize the Attributes template using inhabitant's name from enum (step 1)
and declare them.
[see my_inhabitant.h; product.h and thief.h in the example]

4. Implement inhabitant's behavior in .cpp file and put it in src/ folder.
[see my_inhabitant.h; product.h and thief.h in the example]
*******************************************************************************



****How to create your own event****
{Next steps take place in the events folder}
1. There is an abstract Event structure in CORE. First of all, inherit your own
AnyEvent structure (StorageEvent in the example) from Event and implement all virtual methods of the ancestor.
[see my_event.h file; storage_event.h in the example]

2. //What is AnyEvent?//

3. If you try to add new MyEvent structure, then add it in the std::variant
in AnyEvent structure.
[see my_event.h file; storage_event.h in the example]

4. Add your MyEvent structure declaration.
[see my_event.h file; storage_event.h in the example]

5. There is an std::visit in AnyEvent's Handle() function. Add your
lambda function with your event there.
[see my_event.cpp file; storage_event.cpp in the example]

6. What should lambda functions do? Who do they call?

{Next step takes place in inhabitants/src and inhabitants/include folders}
7. If MyEvent is generated by some Inhabitant, make sure that you're returning
that event where needed.
[see my_inhabitant.h/.cpp; thief.h/.cpp in the example]

{Next step takes place in the model folder}
8. Don't forget to notify observers when event is happening. Do it inside Model's
member functions or do it manually, when event is generated by some inhabitant.
[see my_model.cpp; storage_model.cpp in the example]
*******************************************************************************

